---
description: 
globs: 
alwaysApply: true
---
# Crash 10× Streak Analysis Project Structure

This project analyzes crash game data to predict streak lengths before 10× multipliers. Here's the key file structure:

## Main Components
| temporal
|- [__init__.py](mdc:temporal/__init__.py)
|- [app.py](mdc:temporal/app.py)
|- [deploy.py](mdc:temporal/deploy.py)
|- [evaluation.py](mdc:temporal/evaluation.py)
|- [features.py](mdc:temporal/features.py)
|- [loader.py](mdc:temporal/loader.py)
|- [prediction.py](mdc:temporal/prediction.py)
|- [splitting.py](mdc:temporal/splitting.py)
|- [training.py](mdc:temporal/training.py)
|- [true_predict.py](mdc:temporal/true_predict.py)
|- examples
|-- [__init__.py](mdc:temporal/examples/__init__.py)
|-- [next_streak_prediction.py](mdc:temporal/examples/next_streak_prediction.py)
| utils
|- [__init__.py](mdc:utils/__init__.py)
|- [logger_config.py](mdc:utils/logger_config.py)
|- [rich_summary.py](mdc:utils/rich_summary.py)
- [main.py](mdc:main.py): The entry point for the application, handles command-line arguments and orchestrates the analysis workflow.
- [data_processing.py](mdc:data_processing.py): Handles data loading, cleaning, and feature engineering.
- [logger_config.py](mdc:logger_config.py): Rich logging configuration with tables, panels, and formatted output.
- [fetch_data.py](mdc:fetch_data.py): Database connection to fetch game data.

## Data Flow

1. Data is loaded from CSV or fetched from database
2. Streak lengths before 10× multipliers are analyzed
3. Features are prepared for machine learning
4. Model is trained to predict streak length clusters
5. Visualizations and statistics are generated
6. Results are displayed using rich formatting

## Directory Structure

- `/output`: Contains saved model files, plots, and statistics
- `/logs`: Contains log files from application runs
