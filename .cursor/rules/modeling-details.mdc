---
description: 
globs: 
alwaysApply: false
---
# Modeling and Data Processing

The project uses XGBoost to predict streak length clusters before 10× multipliers. The key modules are [data_processing.py](mdc:data_processing.py) and [modeling.py](mdc:modeling.py).

## Data Processing

### Key Functions in [data_processing.py](mdc:data_processing.py)

- `load_data(csv_path)`: Load and clean crash game data
- `analyze_streaks(df)`: Identify streak lengths before 10× hits
- `calculate_streak_percentiles(streak_lengths)`: Calculate distribution percentiles
- `add_rolling_features(frame, window)`: Add rolling window statistics
- `prepare_features(df, window, clusters)`: Create features for machine learning
- `make_feature_vector(last_window_multipliers, window, feature_cols)`: Create features for prediction

### Feature Engineering

Features include:
- Rolling window statistics: mean, standard deviation, min, max, percentages
- Historical lag values of previous multipliers
- Target variable: cluster of streak length before next 10× hit

## Modeling

### Key Functions in [modeling.py](mdc:modeling.py)

- `train_model(df, feature_cols, clusters, test_frac, random_seed, eval_folds, output_dir)`: Train XGBoost model
- `rolling_origin_indices(n_train, n_folds)`: Generate indices for time-series cross-validation
- `best_round(bst, default_rounds)`: Get best number of rounds from early stopping
- `expected_calibration_error(y_true, y_prob)`: Calculate calibration error
- `generate_confusion_matrix(X_test, y_test, model, feature_cols, output_dir)`: Create confusion matrix
- `predict_next_cluster(model, last_window_multipliers, window, feature_cols)`: Make predictions

### Model Evaluation

The model is evaluated using:
- Log loss compared to baseline geometric probability
- Confusion matrix
- Classification report with precision, recall, and F1 score
- Calibration curve to assess probability accuracy

## Visualization

Key plots generated in [visualization.py](mdc:visualization.py):

- Streak length histograms
- Streak percentile plots
- Feature importance charts
- Calibration curves

## Daily Updates

The system detects distribution drift using [daily_updates.py](mdc:daily_updates.py):
- `process_daily_update(analyzer, new_rows, drift_threshold)`: Update model if drift detected
- `save_model_snapshot(analyzer, output_dir)`: Save model state
- `load_new_data(data_path)`: Load new data for updates
